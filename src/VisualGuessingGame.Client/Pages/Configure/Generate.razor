@using System.Web
@page "/generate"
@attribute [Authorize]
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject IDialogService DialogService

<PageTitle>Generate Images</PageTitle>


    <h2>Generate images</h2>
    Generate images for a visual guessing game.
    <MudCard>
        <MudCardContent>
            <MudTextField Immediate="true" Counter=0 id="PromptId" Label="Describe the image you want" @bind-Value="_prompt" Lines=5 Variant="Variant.Outlined" />
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="OnGenerate">Generate</MudButton>
        </MudCardActions>
    </MudCard>
    <MudGrid Spacing=2 Justify="Justify.Center" Class="mt-4">
        @if(_imageSource.Count == 0 && _isGeneratingImages)
        {
            <MudItem>
                <MudProgressCircular Indeterminate="true"></MudProgressCircular>
            </MudItem>
        }
        else
        {
            int i = 0;
            foreach (var image in _imageSource)
            {
                var j = i;
                if (!_saveButtonStates.ContainsKey($"save-button-{j}")) { _saveButtonStates.Add($"save-button-{j}", false); }
                if (!_saveButtonLabels.ContainsKey($"save-button-{j}")) { _saveButtonLabels.Add($"save-button-{j}", "Save"); }
                <MudItem>
                    <MudCard>
                        <MudCardContent>
                        <MudImage Height="300" Width="300" Fluid="true" ObjectFit="ObjectFit.Contain" Src="@($"data:image/jpeg;base64,{image}")"></MudImage>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton id="@($"save-button-{j}")" Disabled="@_saveButtonStates[$"save-button-{j}"]" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Class="ml-auto" OnClick="@(e => OnSave(image, j))">@_saveButtonLabels[$"save-button-{j}"]</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                i++;
            }
        }
        </MudGrid>



@code{
    private List<string> _imageSource = new List<string>();
    private bool _isGeneratingImages = false;
    private HttpClient? _httpClient;
    private Dictionary<string, bool> _saveButtonStates = new Dictionary<string, bool>();
    private Dictionary<string, string> _saveButtonLabels = new Dictionary<string, string>();


    private string _prompt = String.Empty;

    protected override void OnInitialized()
    {
        _httpClient = HttpClientFactory.CreateClient("WebApi");
        var uri = new Uri(Navigation.Uri);
        if(uri.Query.Contains("code=")) Navigation.NavigateTo($"/login-callback{uri.Query}");
        base.OnInitialized();
    }

    private async Task OnGenerate(MouseEventArgs e)
    {
        _imageSource.Clear();
        _isGeneratingImages = true;
        _saveButtonStates.Clear();
        _saveButtonLabels.Clear();

        if (_httpClient is not null)
        {
            var response = await _httpClient.PostAsJsonAsync<ImageGenParam>("api/imagegen", new ImageGenParam(_prompt, 3));

            if (response != null && response.IsSuccessStatusCode)
            {
                await foreach (var image in response.Content.ReadFromJsonAsAsyncEnumerable<string>())
                {
                    if (image != null)
                    {
                        _imageSource.Add(image);
                    }
                }
            }
            _isGeneratingImages = false;
        }
    }

    private async Task OnSave(string image, int index)
    {
        var parameters = new DialogParameters();
        parameters.Add("Image", image);
        var dialog = await DialogService.ShowAsync<Components.SaveImage>("Save image", parameters);
        if(await dialog.GetReturnValueAsync<bool>())
        {
            _saveButtonStates[$"save-button-{index}"] = true;
            _saveButtonLabels[$"save-button-{index}"] = "Saved";
        }
    }

    private record ImageGenParam(string Prompt, int Number);
}